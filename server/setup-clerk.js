require('dotenv').config();
const mongoose = require('mongoose');
const User = require('./models/User');

const setupClerk = async () => {
  try {
    console.log('üîß Configuration de Clerk...');
    
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/factureasy');
    console.log('‚úÖ Connect√© √† MongoDB');
    
    // Cr√©er un utilisateur admin par d√©faut
    const adminUser = await User.findOne({ email: 'admin@factureasy.com' });
    
    if (!adminUser) {
      const newAdmin = new User({
        clerkId: 'admin-default-123',
        email: 'admin@factureasy.com',
        firstName: 'Admin',
        lastName: 'FactureEasy',
        role: 'super_admin',
        permissions: ['read_clients', 'write_clients', 'read_factures', 'write_factures', 'read_devis', 'write_devis', 'manage_users', 'view_stats']
      });
      
      await newAdmin.save();
      console.log('‚úÖ Utilisateur admin cr√©√©:', newAdmin.email);
    } else {
      console.log('‚úÖ Utilisateur admin existe d√©j√†:', adminUser.email);
    }
    
    // Afficher tous les utilisateurs
    const users = await User.find({});
    console.log('\nüìã Utilisateurs dans la base de donn√©es:');
    users.forEach(user => {
      console.log(`  - ${user.email} (${user.role})`);
    });
    
    console.log('\nüéØ Instructions pour configurer Clerk:');
    console.log('1. Allez sur https://clerk.com/');
    console.log('2. Cr√©ez un compte et une application');
    console.log('3. R√©cup√©rez vos cl√©s dans les param√®tres');
    console.log('4. Ajoutez ces variables dans votre fichier .env:');
    console.log('   CLERK_SECRET_KEY=sk_test_votre_cle_secrete');
    console.log('   CLERK_PUBLISHABLE_KEY=pk_test_votre_cle_publique');
    
    await mongoose.disconnect();
    console.log('\n‚úÖ Configuration termin√©e !');
    
  } catch (error) {
    console.error('‚ùå Erreur configuration:', error);
    process.exit(1);
  }
};

setupClerk(); 